// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quantumMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quantumMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuantumMessage {

namespace {

const ::google::protobuf::Descriptor* MatrixMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_quantumMessage_2eproto() {
  protobuf_AddDesc_quantumMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quantumMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MatrixMessage_descriptor_ = file->message_type(0);
  static const int MatrixMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMessage, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMessage, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMessage, t_),
  };
  MatrixMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatrixMessage_descriptor_,
      MatrixMessage::default_instance_,
      MatrixMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatrixMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMessage, _is_default_instance_));
  ComplexMessage_descriptor_ = file->message_type(1);
  static const int ComplexMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, imaginary_),
  };
  ComplexMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComplexMessage_descriptor_,
      ComplexMessage::default_instance_,
      ComplexMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComplexMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quantumMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatrixMessage_descriptor_, &MatrixMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComplexMessage_descriptor_, &ComplexMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quantumMessage_2eproto() {
  delete MatrixMessage::default_instance_;
  delete MatrixMessage_reflection_;
  delete ComplexMessage::default_instance_;
  delete ComplexMessage_reflection_;
}

void protobuf_AddDesc_quantumMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024quantumMessage.proto\022\016QuantumMessage\"V"
    "\n\rMatrixMessage\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 "
    "\001(\005\022)\n\001t\030\003 \003(\0132\036.QuantumMessage.ComplexM"
    "essage\"1\n\016ComplexMessage\022\014\n\004real\030\001 \001(\002\022\021"
    "\n\timaginary\030\002 \001(\002b\006proto3", 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quantumMessage.proto", &protobuf_RegisterTypes);
  MatrixMessage::default_instance_ = new MatrixMessage();
  ComplexMessage::default_instance_ = new ComplexMessage();
  MatrixMessage::default_instance_->InitAsDefaultInstance();
  ComplexMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quantumMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quantumMessage_2eproto {
  StaticDescriptorInitializer_quantumMessage_2eproto() {
    protobuf_AddDesc_quantumMessage_2eproto();
  }
} static_descriptor_initializer_quantumMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MatrixMessage::kRowsFieldNumber;
const int MatrixMessage::kColsFieldNumber;
const int MatrixMessage::kTFieldNumber;
#endif  // !_MSC_VER

MatrixMessage::MatrixMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantumMessage.MatrixMessage)
}

void MatrixMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatrixMessage::MatrixMessage(const MatrixMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantumMessage.MatrixMessage)
}

void MatrixMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatrixMessage::~MatrixMessage() {
  // @@protoc_insertion_point(destructor:QuantumMessage.MatrixMessage)
  SharedDtor();
}

void MatrixMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatrixMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixMessage_descriptor_;
}

const MatrixMessage& MatrixMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantumMessage_2eproto();
  return *default_instance_;
}

MatrixMessage* MatrixMessage::default_instance_ = NULL;

MatrixMessage* MatrixMessage::New(::google::protobuf::Arena* arena) const {
  MatrixMessage* n = new MatrixMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatrixMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatrixMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  t_.Clear();
}

bool MatrixMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantumMessage.MatrixMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_t;
        break;
      }

      // repeated .QuantumMessage.ComplexMessage t = 3;
      case 3: {
        if (tag == 26) {
         parse_t:
          DO_(input->IncrementRecursionDepth());
         parse_loop_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_t;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantumMessage.MatrixMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantumMessage.MatrixMessage)
  return false;
#undef DO_
}

void MatrixMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantumMessage.MatrixMessage)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated .QuantumMessage.ComplexMessage t = 3;
  for (unsigned int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->t(i), output);
  }

  // @@protoc_insertion_point(serialize_end:QuantumMessage.MatrixMessage)
}

::google::protobuf::uint8* MatrixMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantumMessage.MatrixMessage)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated .QuantumMessage.ComplexMessage t = 3;
  for (unsigned int i = 0, n = this->t_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->t(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QuantumMessage.MatrixMessage)
  return target;
}

int MatrixMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated .QuantumMessage.ComplexMessage t = 3;
  total_size += 1 * this->t_size();
  for (int i = 0; i < this->t_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatrixMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatrixMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixMessage::MergeFrom(const MatrixMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  t_.MergeFrom(from.t_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatrixMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixMessage::CopyFrom(const MatrixMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixMessage::IsInitialized() const {

  return true;
}

void MatrixMessage::Swap(MatrixMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatrixMessage::InternalSwap(MatrixMessage* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  t_.UnsafeArenaSwap(&other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatrixMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixMessage_descriptor_;
  metadata.reflection = MatrixMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixMessage

// optional int32 rows = 1;
void MatrixMessage::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatrixMessage::rows() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.rows)
  return rows_;
}
 void MatrixMessage::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.MatrixMessage.rows)
}

// optional int32 cols = 2;
void MatrixMessage::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatrixMessage::cols() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.cols)
  return cols_;
}
 void MatrixMessage::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.MatrixMessage.cols)
}

// repeated .QuantumMessage.ComplexMessage t = 3;
int MatrixMessage::t_size() const {
  return t_.size();
}
void MatrixMessage::clear_t() {
  t_.Clear();
}
 const ::QuantumMessage::ComplexMessage& MatrixMessage::t(int index) const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.t)
  return t_.Get(index);
}
 ::QuantumMessage::ComplexMessage* MatrixMessage::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:QuantumMessage.MatrixMessage.t)
  return t_.Mutable(index);
}
 ::QuantumMessage::ComplexMessage* MatrixMessage::add_t() {
  // @@protoc_insertion_point(field_add:QuantumMessage.MatrixMessage.t)
  return t_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >&
MatrixMessage::t() const {
  // @@protoc_insertion_point(field_list:QuantumMessage.MatrixMessage.t)
  return t_;
}
 ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >*
MatrixMessage::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:QuantumMessage.MatrixMessage.t)
  return &t_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ComplexMessage::kRealFieldNumber;
const int ComplexMessage::kImaginaryFieldNumber;
#endif  // !_MSC_VER

ComplexMessage::ComplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantumMessage.ComplexMessage)
}

void ComplexMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComplexMessage::ComplexMessage(const ComplexMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantumMessage.ComplexMessage)
}

void ComplexMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  real_ = 0;
  imaginary_ = 0;
}

ComplexMessage::~ComplexMessage() {
  // @@protoc_insertion_point(destructor:QuantumMessage.ComplexMessage)
  SharedDtor();
}

void ComplexMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexMessage_descriptor_;
}

const ComplexMessage& ComplexMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quantumMessage_2eproto();
  return *default_instance_;
}

ComplexMessage* ComplexMessage::default_instance_ = NULL;

ComplexMessage* ComplexMessage::New(::google::protobuf::Arena* arena) const {
  ComplexMessage* n = new ComplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ComplexMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(real_, imaginary_);

#undef ZR_HELPER_
#undef ZR_

}

bool ComplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantumMessage.ComplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float real = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_imaginary;
        break;
      }

      // optional float imaginary = 2;
      case 2: {
        if (tag == 21) {
         parse_imaginary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imaginary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantumMessage.ComplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantumMessage.ComplexMessage)
  return false;
#undef DO_
}

void ComplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantumMessage.ComplexMessage)
  // optional float real = 1;
  if (this->real() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->real(), output);
  }

  // optional float imaginary = 2;
  if (this->imaginary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->imaginary(), output);
  }

  // @@protoc_insertion_point(serialize_end:QuantumMessage.ComplexMessage)
}

::google::protobuf::uint8* ComplexMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantumMessage.ComplexMessage)
  // optional float real = 1;
  if (this->real() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->real(), target);
  }

  // optional float imaginary = 2;
  if (this->imaginary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->imaginary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QuantumMessage.ComplexMessage)
  return target;
}

int ComplexMessage::ByteSize() const {
  int total_size = 0;

  // optional float real = 1;
  if (this->real() != 0) {
    total_size += 1 + 4;
  }

  // optional float imaginary = 2;
  if (this->imaginary() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ComplexMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexMessage::MergeFrom(const ComplexMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.real() != 0) {
    set_real(from.real());
  }
  if (from.imaginary() != 0) {
    set_imaginary(from.imaginary());
  }
}

void ComplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexMessage::CopyFrom(const ComplexMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage::IsInitialized() const {

  return true;
}

void ComplexMessage::Swap(ComplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexMessage::InternalSwap(ComplexMessage* other) {
  std::swap(real_, other->real_);
  std::swap(imaginary_, other->imaginary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexMessage_descriptor_;
  metadata.reflection = ComplexMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexMessage

// optional float real = 1;
void ComplexMessage::clear_real() {
  real_ = 0;
}
 float ComplexMessage::real() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.ComplexMessage.real)
  return real_;
}
 void ComplexMessage::set_real(float value) {
  
  real_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.ComplexMessage.real)
}

// optional float imaginary = 2;
void ComplexMessage::clear_imaginary() {
  imaginary_ = 0;
}
 float ComplexMessage::imaginary() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.ComplexMessage.imaginary)
  return imaginary_;
}
 void ComplexMessage::set_imaginary(float value) {
  
  imaginary_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.ComplexMessage.imaginary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace QuantumMessage

// @@protoc_insertion_point(global_scope)
