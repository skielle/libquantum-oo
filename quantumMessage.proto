syntax = "proto3";

package QuantumMessage;

message ClassicRegisterMessage {
	int32 protocol_messageType = 1;
	repeated int32 bitValue = 2;
	int32 width = 3;
}

message RegisterMessage {
	int32 protocol_messageType = 1;
	MatrixMessage m = 2;
	int32 Width = 3;
}

message RegisterAddressMessage {
	int32 RegisterAddress = 1;
}

message EntangledMeasurementMessage {
	bool aleph = 1;
	RegisterAddressMessage target = 2;
	int32 result = 3;
	EntangledOpHistoryMessage opHistory = 4;
}

message EntangledRegisterMessage {
	int32 protocol_messageType = 1;
	MatrixMessage m = 2;
	int32 Width = 3;
	
	bool aleph = 4;
	repeated EntangledPairMessage pairs = 5;
	repeated EntangledOpHistoryMessage opHistory = 6;

	InetAddr callback_addr = 7;
}

message MatrixMessage {
	int32 rows = 1;
	int32 cols = 2;
	repeated ComplexMessage t = 3; 
}

message ComplexMessage {
	float real = 1;
	float imaginary = 2;
}

message VoidMessage {
}

message EntangledPairMessage {
	MatrixMessage amplitudes = 1;
	bool _isNull = 2;
}

message EntangledOpHistoryMessage {
	repeated MatrixMessage operations = 1;
}

message InetAddr {
	string ipAddress = 1;
	int32 port = 2;
	int32 stackAddr = 3;
}

service QuantumChannel {
	rpc SendMatrix(MatrixMessage) returns (VoidMessage) {}
	rpc SendRegister(RegisterMessage) returns (VoidMessage) {}
	rpc SendEntangledRegister(EntangledRegisterMessage) returns (VoidMessage) {}
	rpc SendClassicRegister(ClassicRegisterMessage) returns (VoidMessage) {}
	rpc EventEntanglePair(EntangledPairMessage) returns (VoidMessage) {}
	rpc EventDisentanglePair(RegisterAddressMessage) returns (VoidMessage) {}
	rpc EventPairMeasureStart(RegisterAddressMessage) returns (VoidMessage) {}
	rpc EventPairMeasureFinish(EntangledMeasurementMessage) returns (VoidMessage) {}
}
