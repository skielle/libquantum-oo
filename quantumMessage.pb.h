// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quantumMessage.proto

#ifndef PROTOBUF_quantumMessage_2eproto__INCLUDED
#define PROTOBUF_quantumMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace QuantumMessage {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_quantumMessage_2eproto();
void protobuf_AssignDesc_quantumMessage_2eproto();
void protobuf_ShutdownFile_quantumMessage_2eproto();

class MatrixMessage;
class ComplexMessage;

// ===================================================================

class MatrixMessage : public ::google::protobuf::Message {
 public:
  MatrixMessage();
  virtual ~MatrixMessage();

  MatrixMessage(const MatrixMessage& from);

  inline MatrixMessage& operator=(const MatrixMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMessage& default_instance();

  void Swap(MatrixMessage* other);

  // implements Message ----------------------------------------------

  inline MatrixMessage* New() const { return New(NULL); }

  MatrixMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatrixMessage& from);
  void MergeFrom(const MatrixMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatrixMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated .QuantumMessage.ComplexMessage t = 3;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 3;
  const ::QuantumMessage::ComplexMessage& t(int index) const;
  ::QuantumMessage::ComplexMessage* mutable_t(int index);
  ::QuantumMessage::ComplexMessage* add_t();
  const ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >&
      t() const;
  ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >*
      mutable_t();

  // @@protoc_insertion_point(class_scope:QuantumMessage.MatrixMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage > t_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_quantumMessage_2eproto();
  friend void protobuf_AssignDesc_quantumMessage_2eproto();
  friend void protobuf_ShutdownFile_quantumMessage_2eproto();

  void InitAsDefaultInstance();
  static MatrixMessage* default_instance_;
};
// -------------------------------------------------------------------

class ComplexMessage : public ::google::protobuf::Message {
 public:
  ComplexMessage();
  virtual ~ComplexMessage();

  ComplexMessage(const ComplexMessage& from);

  inline ComplexMessage& operator=(const ComplexMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexMessage& default_instance();

  void Swap(ComplexMessage* other);

  // implements Message ----------------------------------------------

  inline ComplexMessage* New() const { return New(NULL); }

  ComplexMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComplexMessage& from);
  void MergeFrom(const ComplexMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComplexMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float real = 1;
  void clear_real();
  static const int kRealFieldNumber = 1;
  float real() const;
  void set_real(float value);

  // optional float imaginary = 2;
  void clear_imaginary();
  static const int kImaginaryFieldNumber = 2;
  float imaginary() const;
  void set_imaginary(float value);

  // @@protoc_insertion_point(class_scope:QuantumMessage.ComplexMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float real_;
  float imaginary_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_quantumMessage_2eproto();
  friend void protobuf_AssignDesc_quantumMessage_2eproto();
  friend void protobuf_ShutdownFile_quantumMessage_2eproto();

  void InitAsDefaultInstance();
  static ComplexMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixMessage

// optional int32 rows = 1;
inline void MatrixMessage::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatrixMessage::rows() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.rows)
  return rows_;
}
inline void MatrixMessage::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.MatrixMessage.rows)
}

// optional int32 cols = 2;
inline void MatrixMessage::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatrixMessage::cols() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.cols)
  return cols_;
}
inline void MatrixMessage::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.MatrixMessage.cols)
}

// repeated .QuantumMessage.ComplexMessage t = 3;
inline int MatrixMessage::t_size() const {
  return t_.size();
}
inline void MatrixMessage::clear_t() {
  t_.Clear();
}
inline const ::QuantumMessage::ComplexMessage& MatrixMessage::t(int index) const {
  // @@protoc_insertion_point(field_get:QuantumMessage.MatrixMessage.t)
  return t_.Get(index);
}
inline ::QuantumMessage::ComplexMessage* MatrixMessage::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:QuantumMessage.MatrixMessage.t)
  return t_.Mutable(index);
}
inline ::QuantumMessage::ComplexMessage* MatrixMessage::add_t() {
  // @@protoc_insertion_point(field_add:QuantumMessage.MatrixMessage.t)
  return t_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >&
MatrixMessage::t() const {
  // @@protoc_insertion_point(field_list:QuantumMessage.MatrixMessage.t)
  return t_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuantumMessage::ComplexMessage >*
MatrixMessage::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:QuantumMessage.MatrixMessage.t)
  return &t_;
}

// -------------------------------------------------------------------

// ComplexMessage

// optional float real = 1;
inline void ComplexMessage::clear_real() {
  real_ = 0;
}
inline float ComplexMessage::real() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.ComplexMessage.real)
  return real_;
}
inline void ComplexMessage::set_real(float value) {
  
  real_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.ComplexMessage.real)
}

// optional float imaginary = 2;
inline void ComplexMessage::clear_imaginary() {
  imaginary_ = 0;
}
inline float ComplexMessage::imaginary() const {
  // @@protoc_insertion_point(field_get:QuantumMessage.ComplexMessage.imaginary)
  return imaginary_;
}
inline void ComplexMessage::set_imaginary(float value) {
  
  imaginary_ = value;
  // @@protoc_insertion_point(field_set:QuantumMessage.ComplexMessage.imaginary)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuantumMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_quantumMessage_2eproto__INCLUDED
